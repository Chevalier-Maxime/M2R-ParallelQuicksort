simulation= function(a,p,d){
X = c()
A = c()
D = c()
A = rbinom(d,1,a)
D = rbinom(d,1,p)
X[1] <-0
for(n in 2:d){
X[n] = X[n-1] + A[n] - min(D[n],X[n-1])
}
mean(X)
hist(X)
}
simulation(1/2,1/3,1000)
simulation= function(a,p,d){
X = c()
A = c()
D = c()
A = rbinom(d,1,a)
D = rbinom(d,1,p)
X[1] <-0
for(n in 2:d){
X[n] = X[n-1] + A[n] - min(D[n],X[n-1])
}
mean(X)
hist(X)
}
simulation(1/2,1/3,100000)
simulation(1/4,1/3,100000)
setwd("~/Documents/RICM4/AEP/M2R-ParallelQuicksort")
library(ggplot2)
df <- read.csv("data/chevamax/measurement02-02-2017--19:11_wide.csv",header=T);
View(df)
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=facor(Opt)))+
geom_point(data=df, aes(x=Size, y=Par, color="Par")) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc"));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor(Opt)))+
geom_point(data=df, aes(x=Size, y=Par, color="Par")) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc"));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape="Opt"))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape="Opt")) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape="Opt"));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=Opt))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape="Opt")) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape="Opt"));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape="Opt"))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape="Opt")) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape="Opt"));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor("Opt")))+
geom_point(data=df, aes(x=Size, y=Par, color="Par")) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc"));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor("Opt")))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape=factor("Opt"))) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape=factor("Opt")));
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor(Opt)))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape=factor(Opt))) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape=factor(Opt)));
plot <- ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor(Opt)))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape=factor(Opt))) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape=factor(Opt)));
plot
plot + scale_x_continuous(limits = c(10000, 500000));
plot <- ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor(Opt)))+
geom_point(data=df, aes(x=Size, y=Par, color="Par", shape=factor(Opt))) +
geom_point(data=df, aes(x=Size, y=Libc, color="Libc", shape=factor(Opt)));
plot + scale_x_continuous(limits = c(10000, 500000));
plot;
plot + coord_cartesian(xlim = c(10000, 500000));
plot;
plot + coord_cartesian(xlim = c(10000, 500000));
plot + coord_cartesian(xlim = c(0, 10000));
plotd <- ggplot()+ diamonds(data=df, aes(x=Size, y=Seq, color="Seq", shape=factor(Opt)))+
diamonds(data=df, aes(x=Size, y=Par, color="Par", shape=factor(Opt))) +
diamonds(data=df, aes(x=Size, y=Libc, color="Libc", shape=factor(Opt)));
plot + geom_smooth(se = FALSE, method = "lm");
plot + geom_smooth(se = FALSE);
plotc <- ggplot()+ geom_point(data=df, aes(x=Size, y=Libc, color="Opt"));
plotc;
plotc <- ggplot()+ geom_point(data=df, aes(x=Size, y=Libc, color=Opt));
plotc;
plotc <- ggplot()+ geom_point(data=df, aes(x=Size, y=Libc, color=Opt)) + geom_smooth(se = FALSE);
plotc;
plotc <- ggplot()+ geom_point(data=df, aes(x=Size, y=Libc, color=Opt)) + geom_smooth();
plotc;
plotc <- ggplot()+ geom_point(data=df, aes(x=Size, y=Libc, colour=Opt)) + geom_smooth();
plotc;
plotc <- ggplot()+ geom_point(data=df, aes(x=Size, y=Libc, colour=Opt));
plotc;
plotc <- ggplot(data=df, aes(x=Size, y=Libc, colour=Opt))+ geom_point();
plotc;
plotc <- ggplot(data=df, aes(x=Size, y=Libc, colour=Opt))+ geom_point() + geom_smooth();
plotc;
plotc <- ggplot(data=df, aes(x=Size, y=Libc, colour=Opt))+ geom_point() + geom_smooth(se = FALSE);
plotc;
plotc <- ggplot(data=df, aes(x=Size, y=Libc, colour=Opt))+ geom_point() + geom_smooth(se = FALSE, method = "lm");
plotc;
ChickWeight
chi <- ChickWeight
View(chi)
p2 <- ggplot(ChickWeight, aes(x=Time, y=weight, colour=Diet)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Fitted growth curve per diet")
p2
plotc <- ggplot(data=df, aes(x=Size, y=Libc, colour=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Fitted growth curve per diet")
plotc;
plotc <- ggplot(data=df, aes(x=Size, y=Libc, colour=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotc;
p2 <- ggplot(ChickWeight, aes(x=Time, y=weight, color=Diet)) +
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Fitted growth curve per diet")
p2
plotc <- ggplot(data=df, aes(x=Size, y=Libc, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotc;
plotPar <- ggplot(data=df, aes(x=Size, y=Par, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotSeq <- ggplot(data=df, aes(x=Size, y=Seq, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
multiplot(plotSeq,plotPar,plotc);
multiplot(plotSeq,plotPar,plotc, cols=2);
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(plotSeq,plotPar,plotc, cols=2);
df <- read.csv("data/chevamax/measurement02-02-2017--22:31_wide.csv",header=T);
plotc <- ggplot(data=df, aes(x=Size, y=Libc, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotPar <- ggplot(data=df, aes(x=Size, y=Par, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotSeq <- ggplot(data=df, aes(x=Size, y=Seq, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
multiplot(plotSeq,plotPar,plotc, cols=2);
df <- read.csv("data/chevamax/measurement02-02-2017--23:57_wide.csv",header=T);
plotc <- ggplot(data=df, aes(x=Size, y=Libc, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotPar <- ggplot(data=df, aes(x=Size, y=Par, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
plotSeq <- ggplot(data=df, aes(x=Size, y=Seq, color=Opt))+
geom_point(alpha=.3) +
geom_smooth(alpha=.2, size=1) +
ggtitle("Temps en fonction de la taille et de l'optimisation")
multiplot(plotSeq,plotPar,plotc, cols=2);
