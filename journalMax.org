# -*- coding: utf-8 -*-
#+STARTUP: overview indent inlineimages
#+TITLE:       Laboratory Notebook for a Multi-Threaded Version of Quicksort
#+AUTHOR:      Maxime Chevalier
#+LANGUAGE:    fr
#+TAGS: IMPORTANT(i) TEST(t) DEPRECATED(d) noexport(n)

* Indroduction
  Ce journal est le compte rendu d'un élève de RICM4 à Grenoble.
* Caractéristiques de la machine
** Version du système d'exploitation
 #+begin_src sh :results output :exports both
uname -a;
 #+end_src

 #+RESULTS:
 : Linux chevamax-Satellite-Pro-R50-B 4.4.0-21-generic #37-Ubuntu SMP Mon Apr 18 18:33:37 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

** CPU
#+begin_src sh :results output :exports both
lscpu;
#+end_src

#+RESULTS:
| Architecture:    | x86_64                      |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Mode(s)          | opératoire(s)              | des           | processeurs :32-bit, | 64-bit       |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Byte             | Order:                     | Little        | Endian               |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| CPU(s):          | 4                          |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| On-line          | CPU(s)                     | list:         | 0-3                  |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Thread(s)        | par                        | cœur :        | 2                    |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Cœur(s)          | par                        | socket :      | 2                    |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Socket(s):       | 1                          |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Nœud(s)          | NUMA :                     | 1             |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Identifiant      | constructeur :GenuineIntel |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Famille          | de                         | processeur :6 |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Modèle :         | 69                         |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Model            | name:                      | Intel(R)      | Core(TM)             | i5-4210U     | CPU | @   | 1.70GHz |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Révision :       | 1                          |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Vitesse          | du                         | processeur    | en                   | MHz :997.875 |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| CPU              | max                        | MHz:          | 2700,0000            |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| CPU              | min                        | MHz:          | 800,0000             |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| BogoMIPS:        | 4788.54                    |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Virtualisation : | VT-x                       |               |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Cache            | L1d :                      | 32K           |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Cache            | L1i :                      | 32K           |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Cache            | L2 :                       | 256K          |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Cache            | L3 :                       | 3072K         |                      |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| NUMA             | node0                      | CPU(s):       | 0-3                  |              |     |     |         |     |     |      |     |      |     |     |      |     |       |         |     |      |     |      |     |      |    |    |    |     |         |    |         |        |    |             |             |      |     |         |      |           |            |            |          |     |           |        |         |       |     |     |     |       |      |     |      |      |      |      |       |       |       |        |                  |     |       |     |      |        |        |     |     |           |      |              |     |      |          |           |      |      |      |      |      |         |          |        |     |      |     |     |
| Flags:           | fpu                        | vme           | de                   | pse          | tsc | msr | pae     | mce | cx8 | apic | sep | mtrr | pge | mca | cmov | pat | pse36 | clflush | dts | acpi | mmx | fxsr | sse | sse2 | ss | ht | tm | pbe | syscall | nx | pdpe1gb | rdtscp | lm | constant_tsc | arch_perfmon | pebs | bts | rep_good | nopl | xtopology | nonstop_tsc | aperfmperf | eagerfpu | pni | pclmulqdq | dtes64 | monitor | ds_cpl | vmx | est | tm2 | ssse3 | sdbg | fma | cx16 | xtpr | pdcm | pcid | sse4_1 | sse4_2 | movbe | popcnt | tsc_deadline_timer | aes | xsave | avx | f16c | rdrand | lahf_lm | abm | epb | tpr_shadow | vnmi | flexpriority | ept | vpid | fsgsbase | tsc_adjust | bmi1 | avx2 | smep | bmi2 | erms | invpcid | xsaveopt | dtherm | ida | arat | pln | pts |

** RAM
#+begin_src sh :results output :exports both
free -m;
#+end_src

#+RESULTS:
| total     | utilisé    | libre | partagé | tamp/cache | disponible |      |
| Mem:      | 7898       |  1702 |    1133 |        366 |       5062 | 5751 |
| Partition | d'échange: |  7996 |       0 |       7996 |            |      |

* Test 1
Réexecution du code sur ma machine 

#+begin_src sh :results output : exports both
FILENAME="data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:23"
perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
echo "
  set terminal png size 600,400 
  set output '${FILENAME}_wide.png'
  set datafile separator ','
  set key autotitle columnhead
  plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
" | gnuplot
echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
file:data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:23_wide.png

** Analyse des résultats
On voit ici que les résultats sont complétement différents (et même
plutot incohérents...). A se demander si la machine utilise ses
différents coeurs!

** Retestons en branchant !

#+begin_src sh :results output : exports both
FILENAME="data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:39"
perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
echo "
  set terminal png size 600,400 
  set output '${FILENAME}_wide.png'
  set datafile separator ','
  set key autotitle columnhead
  plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
" | gnuplot
echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
[[file:data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:39_wide.png]]

** Analyse
C'est pas mieux ...

** Vérifions que le programme utilise plusieurs coeurs 

#+begin_src sh :results output raw :exports both
perf stat -e cpu-cycles -e instructions -e cache-references -e cache-misses -e LLC-loads -e LLC-stores --cpu=0-3 --per-core ./src/parallelQuicksort 
#+end_src

#+RESULTS:
Sequential quicksort took: 0.281554 sec.
Parallel quicksort took: 0.448588 sec.
Built-in quicksort took: 0.272621 sec.

 Performance counter stats for 'CPU(s) 0-3':

S0-C0           2      3 118 920 870      cpu-cycles                                                    (66,70%)
S0-C0           2      2 941 573 615      instructions                                                  (83,41%)
S0-C0           2          8 480 420      cache-references                                              (83,40%)
S0-C0           2          2 811 502      cache-misses                                                  (83,40%)
S0-C0           2          4 283 818      LLC-loads                                                     (83,40%)
S0-C0           2          1 822 019      LLC-stores                                                    (83,11%)
S0-C1           2      1 707 679 255      cpu-cycles                                                    (66,70%)
S0-C1           2        952 446 235      instructions                                                  (83,41%)
S0-C1           2          8 421 277      cache-references                                              (83,40%)
S0-C1           2          3 175 977      cache-misses                                                  (83,40%)
S0-C1           2          3 255 670      LLC-loads                                                     (83,40%)
S0-C1           2          1 912 330      LLC-stores                                                    (83,11%)

       1,036287854 seconds time elapsed

Ca a l'air de tourner sur deux des 4 cpu.

* Test 2
Nous allons garder les mêmes valeurs en mélangeant l'ordre d'execution


#+begin_src sh :results output raw :exports both
OUTPUT_DIRECTORY=data/`hostname`_`date +%F`
mkdir -p $OUTPUT_DIRECTORY
OUTPUT_FILE=$OUTPUT_DIRECTORY/measurements_`date +%R`.txt

touch $OUTPUT_FILE

for rep in `seq 1 5`; do
	for i in 100 1000 10000 100000 1000000; do
		echo "Size: $i" >> $OUTPUT_FILE;
		./src/parallelQuicksort $i >> $OUTPUT_FILE;
	done
done
#+end_src

#+begin_src sh :results output raw :exports both
FILENAME="data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:57"
perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
echo "
  set terminal png size 600,400 
  set output '${FILENAME}_wide.png'
  set datafile separator ','
  set key autotitle columnhead
  plot '${FILENAME}_wide.csv' using 1:2 with linespoints, '' using 1:3 with linespoints, '' using 1:4 with linespoints
" | gnuplot
echo [[file:${FILENAME}_wide.png]]
#+end_src

#+RESULTS:
[[file:data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:57_wide.png]]

Oups...

#+begin_src R :results output graphics :file "tata.png" :exports both :width 600 :height 400 :session *R* 
library("ggplot2")
df <- read.csv("data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_14:57_wide.csv",header=T);
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="green"))+
  geom_point(data=df, aes(x=Size, y=Par, color="red")) + 
  geom_point(data=df, aes(x=Size, y=Libc));
#+end_src

#+RESULTS:
[[file:tata.png]]

Petit test en R, mais je ne maitrise pas du tout ggplot ... Du coup
difficile d'analyser.

* Test 3
Dans ce troisieme test nous allons affiner la courbe en faisant des tests
sur des tableaux de taille 10, 50, 100, 500, 1000, 5000, 10000, 50000,
100000, 500000 et 1000000.

Nous allons effectuer le test 10 fois pour chaque valeur.


#+begin_src sh :results output :exports both
scripts/run_benchmarking.sh
#+end_src
#+BEGIN_EXAMPLE
OUTPUT_DIRECTORY=data/`hostname`_`date +%F`
mkdir -p $OUTPUT_DIRECTORY
OUTPUT_FILE=$OUTPUT_DIRECTORY/measurements_`date +%R`.txt

touch $OUTPUT_FILE
for i in 10 50 100 500 1000 5000 10000 50000 100000 500000 1000000; do
    for rep in `seq 1 10`; do
        echo "Siz
#+END_EXAMPLE



Pour trasformer le fichier texte en fichier on utilise le script
fourni et la commande :

#+begin_src sh :results output raw :exports both
FILENAME="data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_16:12"
perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
#+end_src

#+begin_src R :results output graphics :file "toto.png" :exports both :width 600 :height 400 :session *R* 
library("ggplot2")
df <- read.csv("data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_16:12_wide.csv",header=T);
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="Seq")) + geom_line(data=df, aes(x=Size, y=Seq, color="Seq")) +
  geom_point(data=df, aes(x=Size, y=Par, color="Par")) + geom_smooth(data=df, aes(x=Size, y=Par, color="Par"), method="lm", formula=y~x*log(x) +
  geom_point(data=df, aes(x=Size, y=Libc, color="Libc")) + geom_line(data=df, aes(x=Size, y=Libc, color="Libc"));
#+end_src

#+RESULTS:
[[file:toto.png]]


** Compilons en -O3

#+begin_src sh :results output raw :exports both
FILENAME="data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_16:24"
perl scripts/csv_quicksort_extractor2.pl < "$FILENAME.txt" > "${FILENAME}_wide.csv"
#+end_src

#+begin_src R :results output graphics :file "titi.png" :exports both :width 600 :height 400 :session *R*
library("ggplot2")
df <- read.csv("data/chevamax-Satellite-Pro-R50-B_2017-01-19/measurements_16:12_wide.csv",header=T);
ggplot()+ geom_point(data=df, aes(x=Size, y=Seq, color="green"))+
  geom_point(data=df, aes(x=Size, y=Par, color="red")) + 
  geom_point(data=df, aes(x=Size, y=Libc));
#+end_src

#+RESULTS:
[[file:titi.png]]



* Retours sur le TP
retester perf sur des valeurs de tableau plus grande
Le mélange de la boucle reste cyclique donc si les test ont des
influences sur les autre ça peut faire un biais. Il aurait mieux valu
faire de l'aléatoire.
Idéalement faire un fichier csv avec pour chaque experience(ligne) des
parametres (taille tableau, options de compilations....). Ce fichier
csv va etre consomé par un programme qui fera toutes les expériences
et créer un fichier par expérience. Ensuite un autre programme
rassemble ces infos dans un fichier. Puis avec un outil d'analyse (R
de préférence) on fait les résultats.

La variabilité des résultats peut s'expliquer par la commutation, le
choix du pivot, et la taille des morceaux attribué aux threads
(déséquillibrage de charge).

Faire un tableau des experiences avec :
- liste des tailles
- liste des compilations
- liste des quicksort

Puis appeler aléatoirement

Reformer les données 

Analyser les données

* Nouvelle experimentation
J'ai créé le fichier main.c dans le dossier sripts. Il permet de
randomiser les tailles et donne directement un fichier csv. Cependant
il ne randomise pas les différentes optimisation (de O0 à O3).

** Premiers résultats 
[[file:Rplot01.png]]
On voit sur cette image qu'il y a une grosse zone d'insertitude pour
la zone autour de 25000000. 

Nous allons donc relancer le programme avec une valeur à cet endroit.

[[file:Rplot02.png]]

On voit sur ce graphique que la zone d'incertitude s'est réduite mais
est toujours importante entre 10000000 et 20000000. Mais on est
presque sûr que c'est entre ces valeurs que l'algorithme est plus
efficace sur ma machine.
On remarque également que l'optimisation à la compilation joue un role
significatif sur les performances des trois algorithmes.

[[file:Rplot03.png]]

Sur ce jeux de test, on obtient enfin ce qu'on voulait.
Il faudrait maintenant pouvoir superposer les trois courbes pour
avoir un résultat plus flagrant. Mais en analysant les chiffres, on
remarque que c'est autours de 7 500 000 éléments que le parallèlisme
devient avantageux. Ensuite plus l'écars est grand plus le
parallèlisme est avantageux.

Il faudrait pour améliorer les résultats, distinguer les optimisations
pour pouvoir les comparer une à une.
